package jFrames;

import Codes.*;
import java.io.*;
import java.util.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.*;

/**
 * jMain ablak
 * @author GFVHSO
 */
public class jMain extends javax.swing.JFrame {
    /**
     * Diákokat tartalmazó lista
     */
    public static List<Diak> diakok = new ArrayList<>();
    /**
     * Tanárokat tartalmazó lista
     */
    public static List<Tanar> tanarok = new ArrayList<>();
    /**
     * Intézményeket tartalmazó lista
     */
    public static List<Intezmeny> intezmenyek = new ArrayList<>();
    
    /**
     * Creates new form jMain
     */
    public jMain() {
        initComponents();

        cbInit();
        
        try{
            Load("diakok.txt", "tanarok.txt", "intezmenyek.txt");
        }
        catch(Exception ex){
            System.out.println(ex);
        }
        
        DocumentListener dl = new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    updateFieldState();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    updateFieldState();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    updateFieldState();
                }

                protected void updateFieldState() {
                    szures();
                }
        };
        
        tfNev.getDocument().addDocumentListener(dl);
        tfCim.getDocument().addDocumentListener(dl);
        tfOsztaly.getDocument().addDocumentListener(dl);
        tfAzon.getDocument().addDocumentListener(dl);
        tfTantargy.getDocument().addDocumentListener(dl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbSelect = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        lblNev = new javax.swing.JLabel();
        lblCim = new javax.swing.JLabel();
        tfNev = new javax.swing.JTextField();
        tfCim = new javax.swing.JTextField();
        lblOsztaly = new javax.swing.JLabel();
        lblAzon = new javax.swing.JLabel();
        tfOsztaly = new javax.swing.JTextField();
        tfAzon = new javax.swing.JTextField();
        lblTantargy = new javax.swing.JLabel();
        btnModosit = new javax.swing.JButton();
        btnTorol = new javax.swing.JButton();
        tfTantargy = new javax.swing.JTextField();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFajl = new javax.swing.JMenu();
        jMenuItemMentes = new javax.swing.JMenuItem();
        jMenuItemUj = new javax.swing.JMenuItem();
        jMenuKilepes = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Nyilvántartás");
        setMinimumSize(new java.awt.Dimension(1000, 600));
        setName("Main"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 600));
        setSize(new java.awt.Dimension(1000, 600));

        cbSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tanár", "Diák", "Intézmény" }));
        cbSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelectActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable.getTableHeader().setReorderingAllowed(false);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);

        lblNev.setText("Név:");

        lblCim.setText("Cím:");

        tfNev.setEnabled(false);

        tfCim.setEnabled(false);
        tfCim.setMaximumSize(null);

        lblOsztaly.setText("Osztály:");

        lblAzon.setText("Azonosító:");

        tfOsztaly.setEnabled(false);
        tfOsztaly.setMaximumSize(null);

        tfAzon.setEnabled(false);
        tfAzon.setMaximumSize(null);

        lblTantargy.setText("Tantárgy:");

        btnModosit.setText("Módosítás");
        btnModosit.setEnabled(false);
        btnModosit.setMaximumSize(null);
        btnModosit.setPreferredSize(new java.awt.Dimension(75, 30));
        btnModosit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModositActionPerformed(evt);
            }
        });

        btnTorol.setText("Törlés");
        btnTorol.setEnabled(false);
        btnTorol.setMaximumSize(null);
        btnTorol.setPreferredSize(new java.awt.Dimension(75, 30));
        btnTorol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorolActionPerformed(evt);
            }
        });

        tfTantargy.setEnabled(false);
        tfTantargy.setMaximumSize(null);

        jMenuBar.setName("jMenu"); // NOI18N

        jMenuFajl.setText("Fájl");

        jMenuItemMentes.setText("Adatok mentése");
        jMenuItemMentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMentesActionPerformed(evt);
            }
        });
        jMenuFajl.add(jMenuItemMentes);

        jMenuItemUj.setText("Új bejegyzés");
        jMenuItemUj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUjActionPerformed(evt);
            }
        });
        jMenuFajl.add(jMenuItemUj);

        jMenuBar.add(jMenuFajl);

        jMenuKilepes.setText("Kilépés");
        jMenuKilepes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuKilepesMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuKilepes);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNev)
                            .addComponent(tfCim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfOsztaly, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .addComponent(tfAzon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnModosit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOsztaly, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAzon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTantargy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTorol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfTantargy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNev, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNev, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCim, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCim, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblOsztaly, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfOsztaly, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblAzon, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfAzon, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTantargy, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTantargy, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addGap(106, 106, 106)
                        .addComponent(btnModosit, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTorol, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)))
                .addContainerGap())
        );

        cbSelect.getAccessibleContext().setAccessibleDescription("");

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Kategória kiválasztása az adatok megjelenítéséhez
     * @param evt 
     */
    private void cbSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelectActionPerformed
        switch (cbSelect.getSelectedIndex()) {
            case 1 -> initializeTableTanar(jTable);
            case 2 -> initializeTableDiak(jTable);
            case 3 -> initializeTableIntezmeny(jTable);
            default -> {}
        }
    }//GEN-LAST:event_cbSelectActionPerformed

    /**
     * Ha ki van választva egy sor a táblázatban, aktiválódik a Törlés és Módosítás gomb
     * @param evt 
     */
    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        btnModosit.setEnabled(true);
        btnTorol.setEnabled(true);
    }//GEN-LAST:event_jTableMouseClicked

    /**
     * A gombra kattintva mentésre kerülnek az adatok a forrásfájlokba
     * @param evt 
     */
    private void jMenuItemMentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMentesActionPerformed
        JOptionPane opt = new JOptionPane("Biztos, hogy menteni szeretné a jelenlegi állást?", 
                JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);
        JDialog jd = opt.createDialog(opt, "Mentés");
        jd.setVisible(true);
        
        if(opt.getValue().toString().equals("0"))
            Save("diakok.txt", "tanarok.txt", "intezmenyek.txt");
        
        JOptionPane.showMessageDialog(null, "Sikeres mentés!", "Mentés", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemMentesActionPerformed

    /**
     * A gombra kattintva bezáródik az alkalmazás
     * @param evt 
     */
    private void jMenuKilepesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuKilepesMouseClicked
        JOptionPane opt = new JOptionPane("Biztos, hogy bezárja az alkalmazást?\nAz összes nem mentett módosítás el fog veszni!", 
                JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);
        JDialog jd = opt.createDialog(opt, "Kilépés");
        jd.setVisible(true);
        
        if(opt.getValue().toString().equals("0")){
            System.exit(0);
            this.dispose();
            this.setVisible(false);
        }
    }//GEN-LAST:event_jMenuKilepesMouseClicked

    /**
     * A gombra kattintva törlésre kerül a táblázatban kijelölt elem
     * @param evt 
     */
    private void btnTorolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorolActionPerformed
        JOptionPane opt = new JOptionPane("Biztos, hogy törölni szeretné a bejegyzést?", 
                JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);
        JDialog jd = opt.createDialog(opt, "Törlés");
        jd.setVisible(true);
        
        if(opt.getValue().toString().equals("0")){
            int sor = jTable.getSelectedRow();
            String nev = jTable.getModel().getValueAt(sor, 0).toString();

            if(cbSelect.getSelectedItem() == "Tanár"){
                for (int i = 0; i < tanarok.size(); i++)
                    if(tanarok.get(i).getNev().equals(nev))
                        tanarok.remove(i);
                JOptionPane.showMessageDialog(null, "Sikeres törlés!", "Törlés", JOptionPane.INFORMATION_MESSAGE);
                initializeTableTanar(jTable);
            }
            else if(cbSelect.getSelectedItem() == "Diák"){
                for (int i = 0; i < diakok.size(); i++)
                    if(diakok.get(i).getNev().equals(nev))
                        diakok.remove(i);
                initializeTableDiak(jTable);
            }
            else if(cbSelect.getSelectedItem() == "Intézmény"){
                for (int i = 0; i < intezmenyek.size(); i++)
                    if(intezmenyek.get(i).getNev().equals(nev))
                        intezmenyek.remove(i);
                initializeTableIntezmeny(jTable);
            }
        }
    }//GEN-LAST:event_btnTorolActionPerformed

    /**
     * A gombra kattintva megnyílik egy új ablak, ahol a táblázatban kijelölt elem adatait lehet módosítani
     * @param evt 
     */
    private void btnModositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModositActionPerformed
        int sor = jTable.getSelectedRow();
        TableModel tm = jTable.getModel();
        String select = cbSelect.getSelectedItem().toString();
        jModosit uj = new jModosit(sor, tm, select);
        uj.setVisible(true);
    }//GEN-LAST:event_btnModositActionPerformed

    /**
     * A gombra kattintva megnyílik egy új ablak, ahol egy új bejegyzést lehet létrehozni és rögzíteni
     * @param evt 
     */
    private void jMenuItemUjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUjActionPerformed
        jUj uj = new jUj();
        uj.setVisible(true);
    }//GEN-LAST:event_jMenuItemUjActionPerformed

    /**
     * Main függvény
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jMain().setVisible(true);
            }
        });
    }
    
    /**
     * Kitörli a táblázat tartalmát
     * @param table jTable példány
     */
    public static void tablaTorles(JTable table){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int sorokszama = table.getRowCount();
        for (int i = sorokszama - 1; i >= 0; i--)
            model.removeRow(i);
    }
    
    /**
     * A mezőkbe beírt szöveg alapján minden billentyű leütésnél megjeleníti a szűrésnek megfelelő találatokat a táblázatban
     */
    public void szures(){
        tablaTorles(jTable);
        DefaultTableModel model = (DefaultTableModel)jTable.getModel();
        String nev = tfNev.getText().toLowerCase();
        String cim = tfCim.getText().toLowerCase();
        String osztaly = tfOsztaly.getText().toLowerCase();
        String azon = tfAzon.getText().toLowerCase();
        String tantargy = tfTantargy.getText().toLowerCase();
        int sel = cbSelect.getSelectedIndex();

        switch (sel) {
            case 1 -> {
                for(Tanar t : tanarok){
                    if(t.getNev().toLowerCase().contains(nev) && t.getCim().toLowerCase().contains(cim) && t.getTargy().toLowerCase().contains(tantargy))
                        model.addRow(new Object[]{t.getNev(), t.getCim(), t.getSzulEv(), t.getTargy()});
                }
            }
            case 2 -> {
                for(Diak d : diakok){
                    if(d.getNev().toLowerCase().contains(nev) && d.getCim().toLowerCase().contains(cim) &&
                           d.getOsztaly().toLowerCase().contains(osztaly) && (d.getAzon() + "").contains(azon))
                        model.addRow(new Object[]{d.getNev(), d.getCim(), d.getSzulEv(), d.getOsztaly(), d.getAzon()});
                }
            }
            case 3 -> {
                for(Intezmeny i : intezmenyek){
                    if(i.getNev().toLowerCase().contains(nev) && i.getCim().toLowerCase().contains(cim))
                        model.addRow(new Object[]{i.getNev(), i.getCim(), i.getIntezmenyVezeto()});
                }
            }
            default -> {
            }
        }
    }
    
    /**
     * A forrásfájlból betölti az adatokat a memóriába
     * @param src1 forrásfájl neve
     * @param src2 forrásfájl neve
     * @param src3 forrásfájl neve
     * @throws java.lang.Exception kivétel
     */
    public static void Load(String src1, String src2, String src3) throws Exception{
        /*diakok.add(new Diak("Kiss Józsi", "Ecser, Sajtos utca 5.", "2015-02-03", 12345678, "1/A"));
        diakok.add(new Diak("Szabó Andi", "Debrecen, Kovács utca 56.", "2006-10-20", 87654321, "5/D"));
        tanarok.add(new Tanar("Eper Lilla", "Vecsés, Perec köz 77.", "1998-09-22", "Magyar"));
        tanarok.add(new Tanar("Hanusi Béla", "Budaörs, Perec köz 77.", "1998-09-22", "Angol"));
        intezmenyek.add(new Intezmeny("BGSZC Keleti Károly Közgazdasági Technikum", "1106 Budapest, Gyakorló utca 21-23.", "Vasné Botár Ágnes"));
        intezmenyek.add(new Intezmeny("Budapesti Műszaki és Gazdaságtudományi Egyetem", "1111 Budapest, Műegyetem rkp. 3.", "Rektor: Czigány Tibor, Kancellár: Kotán Attila"));
        */
            FileInputStream f = new FileInputStream(src1);
            ObjectInputStream in = new ObjectInputStream(f);
            diakok = (List<Diak>) in.readObject();
            in.close();

            FileInputStream f1 = new FileInputStream(src2);
            ObjectInputStream in1 = new ObjectInputStream(f1);
            tanarok = (List<Tanar>) in1.readObject();
            in.close();

            FileInputStream f2 = new FileInputStream(src3);
            ObjectInputStream in2 = new ObjectInputStream(f2);
            intezmenyek = (List<Intezmeny>) in2.readObject();
            in.close();
    }
    
    /**
     * A memóriábal a forrásfájlba menti az adatokat
     * @param src1 forrásfájl neve
     * @param src2 forrásfájl neve
     * @param src3 forrásfájl neve
     */
    public static void Save(String src1, String src2, String src3){
        try {
            FileOutputStream f = new FileOutputStream(src1);
            ObjectOutputStream out = new ObjectOutputStream(f);
            out.writeObject(diakok);
            out.close();
        } catch(IOException ex) {
            System.out.println(ex);
        }
        
        try {
            FileOutputStream f = new FileOutputStream(src2);
            ObjectOutputStream out = new ObjectOutputStream(f);
            out.writeObject(tanarok);
            out.close();
        } catch(IOException ex) {
            System.out.println(ex);
        }
        
        try {
            FileOutputStream f = new FileOutputStream(src3);
            ObjectOutputStream out = new ObjectOutputStream(f);
            out.writeObject(intezmenyek);
            out.close();
        } catch(IOException ex) {
            System.out.println(ex);
        }       
    }
    
    /**
     * Betölti az adatokat a lenyíló menübe, amiből ki lehet választani a megjelenítendő adatok fajtáját
     */
    public static void cbInit(){
        String NOT_SELECTABLE_OPTION = " - Kérem válasszon! - ";
        cbSelect.setModel(
            new DefaultComboBoxModel<String>() {
                boolean selectionAllowed = true;

                @Override
                public void setSelectedItem(Object anObject) {
                    if (!NOT_SELECTABLE_OPTION.equals(anObject)) {
                        super.setSelectedItem(anObject);
                    } else if (selectionAllowed) {
                        selectionAllowed = false;
                        super.setSelectedItem(anObject);
                    }
                }
            }
        );

        cbSelect.addItem(NOT_SELECTABLE_OPTION);
        cbSelect.addItem("Tanár");
        cbSelect.addItem("Diák");
        cbSelect.addItem("Intézmény");
        
        tablaTorles(jTable);
    }
    
    /**
     * Tanár fajtájú adatok táblázatban való megjelenítéséért felel
     * @param table táblázat, amiben megjelennek az adatok
     */
    public void initializeTableTanar(JTable table){
        TableColumnModel columnModel = new DefaultTableColumnModel();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        
        //Tábla fejlécének megvalósítása
        TableColumn column0 = new TableColumn();
        column0.setModelIndex(0);
        column0.setHeaderValue("Név");
        column0.setPreferredWidth(100);
        columnModel.addColumn(column0);
        
        TableColumn column1 = new TableColumn();
        column1.setModelIndex(1);
        column1.setHeaderValue("Cím");
        column1.setPreferredWidth(100);
        columnModel.addColumn(column1);
        
        TableColumn column2 = new TableColumn();
        column2.setModelIndex(2);
        column2.setHeaderValue("Születési dátum");
        column2.setPreferredWidth(100);
        columnModel.addColumn(column2);
        
        TableColumn column3 = new TableColumn();
        column3.setModelIndex(3);
        column3.setHeaderValue("Tantárgy");
        column3.setPreferredWidth(100);
        columnModel.addColumn(column3);
        
        table.setColumnModel(columnModel);
        
        tablaTorles(jTable);
        
        //tábla feltöltése
        if(tanarok.isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "Nincs megjeleníthető adat!",
                    "Információ", JOptionPane.INFORMATION_MESSAGE);
            cbInit();
        }
        else{
            for(Tanar t : tanarok)
                model.addRow(new Object[]{t.getNev(), t.getCim(), t.getSzulEv(), t.getTargy()});
            tfCim.setEnabled(true);
            tfNev.setEnabled(true);
            tfOsztaly.setEnabled(false);
            tfAzon.setEnabled(false);
            tfTantargy.setEnabled(true);
            btnModosit.setEnabled(false);
            btnTorol.setEnabled(false);
        }
    }
    
    /**
     * Diák fajtájú adatok táblázatban való megjelenítéséért felel
     * @param table táblázat, amiben megjelennek az adatok
     */
    public void initializeTableDiak(JTable table){
        TableColumnModel columnModel = new DefaultTableColumnModel();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        
        //Tábla fejlécének megvalósítása
        TableColumn column0 = new TableColumn();
        column0.setModelIndex(0);
        column0.setHeaderValue("Név");
        column0.setPreferredWidth(100);
        columnModel.addColumn(column0);
        
        TableColumn column1 = new TableColumn();
        column1.setModelIndex(1);
        column1.setHeaderValue("Cím");
        column1.setPreferredWidth(100);
        columnModel.addColumn(column1);
        
        TableColumn column2 = new TableColumn();
        column2.setModelIndex(2);
        column2.setHeaderValue("Születési dátum");
        column2.setPreferredWidth(100);
        columnModel.addColumn(column2);
        
        TableColumn column3 = new TableColumn();
        column3.setModelIndex(3);
        column3.setHeaderValue("Osztály");
        column3.setPreferredWidth(100);
        columnModel.addColumn(column3);
        
        TableColumn column4 = new TableColumn();
        column4.setModelIndex(4);
        column4.setHeaderValue("Azonosító");
        column4.setPreferredWidth(100);
        columnModel.addColumn(column4);
        
        table.setColumnModel(columnModel);
        
        tablaTorles(jTable);
        
        //tábla feltöltése
        if(diakok.isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "Nincs megjeleníthető adat!",
                    "Információ", JOptionPane.INFORMATION_MESSAGE);
            cbInit();
        }
        else{
            for(Diak d : diakok)
                model.addRow(new Object[]{d.getNev(), d.getCim(), d.getSzulEv(), d.getOsztaly(), d.getAzon()});
            
            tfCim.setEnabled(true);
            tfNev.setEnabled(true);
            tfOsztaly.setEnabled(true);
            tfAzon.setEnabled(true);
            tfTantargy.setEnabled(false);
            btnModosit.setEnabled(false);
            btnTorol.setEnabled(false);
        }
    }
    
    /**
     * Intézet fajtájú adatok táblázatban való megjelenítéséért felel
     * @param table táblázat, amiben megjelennek az adatok
     */
    public void initializeTableIntezmeny(JTable table){
        TableColumnModel columnModel = new DefaultTableColumnModel();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        
        //Táblázat fejlécének megvalósítása
        TableColumn column0 = new TableColumn();
        column0.setModelIndex(0);
        column0.setHeaderValue("Név");
        column0.setPreferredWidth(100);
        columnModel.addColumn(column0);
        
        TableColumn column1 = new TableColumn();
        column1.setModelIndex(1);
        column1.setHeaderValue("Cím");
        column1.setPreferredWidth(100);
        columnModel.addColumn(column1);
        
        TableColumn column2 = new TableColumn();
        column2.setModelIndex(2);
        column2.setHeaderValue("Intézményvezető neve");
        column2.setPreferredWidth(100);
        columnModel.addColumn(column2);
        
        table.setColumnModel(columnModel);
        
        tablaTorles(jTable);
        
        //tábla feltöltése
        if(intezmenyek.isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "Nincs megjeleníthető adat!",
                    "Információ", JOptionPane.INFORMATION_MESSAGE);
            cbInit();
        }
        else{
            for(Intezmeny i : intezmenyek)
                model.addRow(new Object[]{i.getNev(), i.getCim(), i.getIntezmenyVezeto()});
            
            tfCim.setEnabled(true);
            tfNev.setEnabled(true);
            tfOsztaly.setEnabled(false);
            tfAzon.setEnabled(false);
            tfTantargy.setEnabled(false);
            btnModosit.setEnabled(false);
            btnTorol.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnModosit;
    private static javax.swing.JButton btnTorol;
    private static javax.swing.JComboBox<String> cbSelect;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFajl;
    private javax.swing.JMenuItem jMenuItemMentes;
    private javax.swing.JMenuItem jMenuItemUj;
    private javax.swing.JMenu jMenuKilepes;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable;
    private static javax.swing.JLabel lblAzon;
    private static javax.swing.JLabel lblCim;
    private static javax.swing.JLabel lblNev;
    private static javax.swing.JLabel lblOsztaly;
    private static javax.swing.JLabel lblTantargy;
    private static javax.swing.JTextField tfAzon;
    private static javax.swing.JTextField tfCim;
    private static javax.swing.JTextField tfNev;
    private static javax.swing.JTextField tfOsztaly;
    private static javax.swing.JTextField tfTantargy;
    // End of variables declaration//GEN-END:variables
}
